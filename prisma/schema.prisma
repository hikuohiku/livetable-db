// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
}

model User {
  uuid  String  @id @default(uuid()) @map("uuid")
  email String  @unique
  name  String?

  googleUser    GoogleUser?
  subscriptions Subscription[]
  schedules     UserSchedule[]

  @@map("users")
}

model GoogleUser {
  user         User    @relation(fields: [userId], references: [uuid])
  userId       String  @id @map("user_id")
  refreshToken String? @map("refresh_token") @db.VarChar(512)
  accessToken  String? @map("access_token") @db.VarChar(2048)
  thumbnail    String? @map("thumbnail")

  @@map("google_users")
}

model Channel {
  channelId   String  @id @map("channel_id")
  channelName String? @map("channel_name")
  handle      String?
  thumbnail   String?

  streams       Video[]
  subscriptions Subscription[]

  @@map("channels")
}

model Video {
  videoId     String    @id @map("video_id")
  channel     Channel   @relation(fields: [channelId], references: [channelId])
  channelId   String    @map("channel_id")
  title       String?
  description String?   @db.Text
  url         String?
  thumbnail   String?
  startAt     DateTime? @map("start_at")
  endAt       DateTime? @map("end_at")
  liveStatus  String?   @map("live_status") // "live" | "upcoming" | "completed" | "none"

  schedules UserSchedule[]

  @@map("streams")
}

model Subscription {
  user      User     @relation(fields: [userId], references: [uuid])
  userId    String   @map("user_id")
  channel   Channel  @relation(fields: [channelId], references: [channelId])
  channelId String   @map("channel_id")
  createdAt DateTime @default(now()) @map("created_at")
  updatedAt DateTime @default(now()) @updatedAt @map("updated_at")

  @@id([userId, channelId])
  @@map("subscriptions")
}

model UserSchedule {
  user      User    @relation(fields: [userId], references: [uuid])
  userId    String  @map("user_id")
  video     Video   @relation(fields: [videoId], references: [videoId])
  videoId   String  @map("video_id")
  isNoticed Boolean @default(false) @map("is_noticed")

  @@id([userId, videoId])
  @@map("user_schedules")
}